name: Publish Docker image

on:
  push:
    branches:
      - main # This workflow triggers on pushes to the 'main' branch

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest # Specifies the runner environment for this job
    permissions:
      packages: write # Required to push Docker images to package registries
      contents: read # Required to check out the repository code
      attestations: write # Required for generating build attestations
      id-token: write # Required for secure token exchange, often used with attestations
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4 # Action to check out your repository code

      # --- Diagnostic steps (You can remove these after the build works consistently) ---
      - name: Debug - List contents of repository root
        run: ls -la .

      - name: Debug - List contents of ./my-app directory
        run: ls -la ./my-app

      - name: Debug - Attempt to read ./my-app/Dockerfile content
        run: cat ./my-app/Dockerfile || echo "Could not read Dockerfile content"
      # --- End of diagnostic steps ---

      - name: Log in to Docker Hub
        uses: docker/login-action@v3 # Action to log into Docker Hub
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Uses a GitHub secret for Docker Hub username
          password: ${{ secrets.DOCKER_PASSWORD }} # Uses a GitHub secret for Docker Hub password (use an access token!)

      - name: Extract metadata (tags, labels) for Docker
        id: meta # Assigns an ID to this step to reference its outputs
        uses: docker/metadata-action@v5 # Action to extract image metadata from Git context
        with:
          images: alaametawe/my-app # Defines the base image name for tagging

      - name: Debug metadata action output
        run: |
          echo "Generated tags by metadata-action: ${{ steps.meta.outputs.tags }}"
          echo "Generated labels by metadata-action: ${{ steps.meta.outputs.labels }}"

      # --- NEW: Build and push Docker image using traditional 'docker build' and 'docker push' ---
      - name: Build and push Docker image (Traditional Docker)
        id: push # Assign an ID to this step to get outputs like digest
        env:
          # metadata-action outputs tags as a comma-separated string (e.g., "repo/image:tag1,repo/image:tag2")
          # We'll use the first tag for the 'docker build' command.
          # For pushing multiple tags, you'd need to iterate or use 'docker tag' for each.
          PRIMARY_TAG: ${{ steps.meta.outputs.tags }}
        run: |
          echo "--- Starting traditional docker build and push ---"
          echo "Building image with tag: ${PRIMARY_TAG}"

          # Build the Docker image
          # -t: Tag the image
          # ./my-app: Specifies the build context (where Dockerfile and source files are)
          docker build -t "${PRIMARY_TAG}" ./my-app

          # Push the Docker image to Docker Hub
          docker push "${PRIMARY_TAG}"
          echo "--- Traditional docker build and push finished ---"

          # Output the image digest for the attestation step
          # This requires parsing the output of 'docker inspect'
          IMAGE_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "${PRIMARY_TAG}" | cut -d'@' -f2)
          echo "image_digest=${IMAGE_DIGEST}" >> "$GITHUB_OUTPUT"

      - name: Generate artifact attestation
        # This step now relies on the 'image_digest' output from the previous manual step
        uses: actions/attest-build-provenance@v1 # Action to generate a build provenance attestation
        with:
          subject-name: index.docker.io/alaametawe/my-app # The name of the image being attested
          subject-digest: ${{ steps.push.outputs.image_digest }} # Uses the digest output from the manual build step
          push-to-registry: true # Pushes the attestation to the registry


